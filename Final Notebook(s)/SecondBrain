### 1. Organize the Notebook Structure
Since Part 1 consists of multiple models, data generation, and evaluation steps, a clear structure with appropriate sections is essential. Here’s a suggested layout:

- **Title and Introduction**: 
   - Provide a brief overview of the project and objectives. Include a short description of each model, evaluation metric (MMD), and visualization tasks.

- **1. Data Generation**:
   - Describe and implement the `sklearn.datasets.make_moons()` data generation with explanations.
   - Show examples of generated data (scatter plots) to illustrate the dataset before moving on to model training.

- **2. Models**:
   - For each model, create a subsection and clearly label them:
     1. **Two-Dimensional Histogram**
     2. **Single Gaussian**
     3. **Gaussian Mixture Model (GMM)**
     4. **Kernel Density Estimator (KDE)**
   - In each subsection, include:
     - Code cells for model implementation.
     - Explanation cells to clarify model assumptions and setup.
     - Examples of model fitting or training.

- **3. Evaluation Metric: Maximum Mean Discrepancy (MMD)**:
   - Briefly explain the MMD metric and the purpose of using it to evaluate the models.
   - Implement the MMD calculation code with both squared exponential and inverse multi-quadratic kernels.
   - Demonstrate an example of MMD calculation for one model to ensure clarity.

- **4. Hyperparameter Tuning and Model Evaluation**:
   - Create a loop to evaluate each model’s performance across different hyperparameter values (e.g., bin size for histograms, number of components for GMM, bandwidth for KDE).
   - Calculate and record the MMD values between generated and test datasets.
   - Plot the MMD values as a function of model hyperparameters to show the effect of tuning.

- **5. Visualizations of Density and Generated Data**:
   - For each representative model (both good and bad), include:
     - **Density Visualization**: A 2D plot showing the learned density (e.g., using a contour plot for KDE or heatmap for histogram).
     - **Generated Data Visualization**: A 2D plot of data generated by the model overlaid on the training data.
   - Add comments on each model’s strengths and weaknesses based on these visualizations.

- **6. Summary and Discussion**:
   - Summarize findings about each model's performance.
   - Discuss the strengths and limitations of each approach (histogram, Gaussian, GMM, KDE) based on your visualizations and MMD evaluations.

### 2. Consolidate Code from Different Files
Copy the code from each `.py` file and notebook into corresponding sections in the main notebook. Here are some tips:

- **Reuse and Organize Functions**: If you have reusable functions (e.g., for MMD calculation or sampling from the models), place them in a “Helper Functions” section at the beginning. This will keep the code cleaner in later cells.
- **Adjust Imports**: Ensure all necessary libraries are imported at the top of the notebook (e.g., `numpy`, `matplotlib`, `sklearn`, etc.).

### 3. Add Explanations and Markdown Cells
- For each model, add a Markdown cell that explains the purpose, setup, and assumptions of the model.
- Use Markdown to clearly label code cells and sections.
- Add mathematical explanations where necessary, especially for MMD and density calculation.

### 4. Export to HTML
Once the notebook is complete:

1. Save the notebook with the filename `generative-baselines.ipynb`.
2. Export it to HTML by using the Jupyter Notebook menu: **File > Download as > HTML (.html)**.

### 5. Zip and Submit
- Zip the `.ipynb` and `.html` files into a single archive named `ex01.zip`.
- Ensure the notebook is clean (remove any unnecessary code or debug cells) and the output cells are visible if they are informative.